'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var $q = function () {
    function $q() {
        _classCallCheck(this, $q);
    }

    _createClass($q, null, [{
        key: 'get',
        value: function get(url, data) {
            return $q.request('GET', url, data);
        }
    }, {
        key: 'put',
        value: function put(url, data) {
            return $q.request('PUT', url, data);
        }
    }, {
        key: 'post',
        value: function post(url, data) {
            return $q.request('POST', url, data);
        }
    }, {
        key: 'patch',
        value: function patch(url, data) {
            return $q.request('PATCH', url, data);
        }
    }, {
        key: 'delete',
        value: function _delete(url, data) {
            return $q.request('DELETE', url, data);
        }
    }, {
        key: 'request',
        value: function request(method, url, data) {
            return jQuery.ajax({
                method: method,
                url: url,
                data: data,
                dataType: 'json'
            }).fail(function (response) {
                if (typeof response.responseJSON !== 'undefined') {
                    var msg = _typeof(response.responseJSON.errorDescription) === 'object' ? response.responseJSON.errorDescription.join('<br>') : response.responseJSON.errorDescription;

                    if (response.status === 400) toastr.warning(msg, response.responseJSON.error.toUpperCase());else toastr.error(msg, response.responseJSON.error.toUpperCase());
                } else toastr.error('Received a non-JSON ' + response.status + ' response from the server.', 'Something went wrong!');
            });
        }
    }]);

    return $q;
}();

var installPage = new Vue({
    el: '#installPage',

    data: {
        steps: {
            environment: {
                passedChecks: 0,
                class: "active",
                description: "Check that required dependencies are met",
                checks: [{
                    id: 'php_version',
                    state: 'pending',
                    description: 'PHP version >= 5.5.9'
                }, {
                    id: 'openssl_module',
                    state: 'pending',
                    description: 'PHP OpenSSL module available'
                }, {
                    id: 'mysql_module',
                    state: 'pending',
                    description: 'PHP MySQL module available'
                }, {
                    id: 'pdo_module',
                    state: 'pending',
                    description: 'PHP PDO module available'
                }, {
                    id: 'mbstring_module',
                    state: 'pending',
                    description: 'PHP MBString module available'
                }, {
                    id: 'tokenizer_module',
                    state: 'pending',
                    description: 'PHP Tokenizer module available'
                }, {
                    id: 'storage_writable',
                    state: 'pending',
                    description: 'storage folder writable'
                }]
            },
            database: {
                class: "",
                passedChecks: 0,
                description: "Setup and check database connection",
                checks: [{
                    id: 'check',
                    method: 'get',
                    state: 'pending',
                    description: 'Check database connection'
                }, {
                    id: 'install',
                    method: 'post',
                    state: 'pending',
                    description: 'Install migrations table'
                }, {
                    id: 'migrate',
                    method: 'post',
                    state: 'pending',
                    description: 'Run migrations'
                }, {
                    id: 'seed',
                    method: 'post',
                    state: 'pending',
                    description: 'Seed initial data'
                }]
            },
            administrator: {
                created: false,
                class: "",
                description: "Create the administrator user",
                user: {
                    firstName: '',
                    lastName: '',
                    email: '',
                    password: '',
                    password_confirmation: ''
                }
            },
            ready: {
                class: "",
                description: "Setup complete"
            }
        }
    },

    methods: {
        runChecks: function runChecks() {
            this.steps.environment.checks.forEach(function (check) {
                return check.state = 'pending';
            });
            this.steps.environment.passedChecks = 0;

            this.runCheck(0);
        },
        runCheck: function runCheck(pos) {
            var self = this;
            var check = self.steps.environment.checks[pos];

            $q.get('/api/install/check/' + check.id).success(function (_ref) {
                var data = _ref.data;

                self.steps.environment.checks[pos].state = data ? 'ok' : 'failed';

                if (++pos < self.steps.environment.checks.length) {
                    self.runCheck(pos);
                    self.steps.environment.passedChecks++;
                } else if (self.steps.environment.passedChecks == self.steps.environment.checks.length - 1) toastr.success('All checks passed! Please click the next button to continue');
            });
        },
        completeEnvironmentStep: function completeEnvironmentStep() {
            if (this.steps.environment.passedChecks != this.steps.environment.checks.length - 1) {
                toastr.warning('Please click the Start button to run checks before continuing');
                return;
            }

            this.steps.environment.class = 'completed';
            this.steps.database.class = 'active';
        },
        runDbChecks: function runDbChecks() {
            this.steps.database.checks.forEach(function (check) {
                return check.state = 'pending';
            });
            this.steps.database.passedChecks = 0;

            this.runDbCheck(0);
        },
        runDbCheck: function runDbCheck(pos) {
            var self = this;
            var check = self.steps.database.checks[pos];

            $q[check.method]('/api/install/database/' + check.id).success(function (_ref2) {
                var data = _ref2.data;

                check.state = data ? 'ok' : 'failed';

                if (check.state == 'failed') {
                    toastr.error('Something went wrong! Please check the applications log file for more information', 'Database Error');
                } else if (++pos < self.steps.database.checks.length) {
                    self.runDbCheck(pos);
                    self.steps.database.passedChecks++;
                } else if (self.steps.database.passedChecks == self.steps.database.checks.length - 1) toastr.success('All steps complete! Please click the next button to continue');
            });
        },
        completeDatabaseStep: function completeDatabaseStep() {
            if (this.steps.database.passedChecks != this.steps.database.checks.length - 1) {
                toastr.warning('Please click the Check Connection button to run the connection test before continuing');
                return;
            }
            this.steps.database.class = 'completed';
            this.steps.administrator.class = 'active';
        },
        createAdministrator: function createAdministrator() {
            var self = this;
            $q.put('/api/install/administrator', this.steps.administrator.user).success(function () {
                toastr.success('Administrator user successfully');
                self.steps.administrator.created = true;
            });
        },
        completeAdministratorStep: function completeAdministratorStep() {
            this.steps.administrator.class = "completed";
            this.steps.ready.class = "completed";
        }
    }

});
//# sourceMappingURL=install.min.js.map
