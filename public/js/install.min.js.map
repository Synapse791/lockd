{"version":3,"sources":["00-quest.js","install.js"],"names":["$q","url","data","request","method","jQuery","ajax","dataType","fail","response","responseJSON","msg","errorDescription","join","status","toastr","warning","error","toUpperCase","installPage","Vue","el","steps","environment","passedChecks","class","description","checks","id","state","database","administrator","created","user","firstName","lastName","email","password","password_confirmation","ready","methods","runChecks","forEach","check","runCheck","pos","self","get","success","length","completeEnvironmentStep","runDbChecks","runDbCheck","completeDatabaseStep","createAdministrator","put","completeAdministratorStep"],"mappings":"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","file":"install.min.js","sourcesContent":["class $q\n{\n    static get(url, data) {\n        return $q.request('GET', url, data);\n    }\n\n    static put(url, data) {\n        return $q.request('PUT', url, data);\n    }\n\n    static post(url, data) {\n        return $q.request('POST', url, data);\n    }\n\n    static patch(url, data) {\n        return $q.request('PATCH', url, data);\n    }\n\n    static delete(url, data) {\n        return $q.request('DELETE', url, data);\n    }\n\n    static request(method, url, data) {\n        return jQuery.ajax({\n                method: method,\n                url: url,\n                data: data,\n                dataType: 'json'\n            })\n            .fail(response => {\n                if (typeof response.responseJSON !== 'undefined') {\n                    let msg = typeof response.responseJSON.errorDescription === 'object'\n                        ? response.responseJSON.errorDescription.join('<br>')\n                        : response.responseJSON.errorDescription;\n\n                    if (response.status === 400)\n                        toastr.warning(msg, response.responseJSON.error.toUpperCase());\n                    else\n                        toastr.error(msg, response.responseJSON.error.toUpperCase());\n                } else\n                    toastr.error(`Received a non-JSON ${response.status} response from the server.`, 'Something went wrong!');\n            });\n    }\n}","let installPage = new Vue({\n    el: '#installPage',\n\n    data: {\n        steps: {\n            environment: {\n                passedChecks: 0,\n                class: \"active\",\n                description: \"Check that required dependencies are met\",\n                checks: [\n                    {\n                        id: 'php_version',\n                        state: 'pending',\n                        description: 'PHP version >= 5.5.9'\n                    },\n                    {\n                        id: 'openssl_module',\n                        state: 'pending',\n                        description: 'PHP OpenSSL module available'\n                    },\n                    {\n                        id: 'mysql_module',\n                        state: 'pending',\n                        description: 'PHP MySQL module available'\n                    },\n                    {\n                        id: 'pdo_module',\n                        state: 'pending',\n                        description: 'PHP PDO module available'\n                    },\n                    {\n                        id: 'mbstring_module',\n                        state: 'pending',\n                        description: 'PHP MBString module available'\n                    },\n                    {\n                        id: 'tokenizer_module',\n                        state: 'pending',\n                        description: 'PHP Tokenizer module available'\n                    },\n                    {\n                        id: 'storage_writable',\n                        state: 'pending',\n                        description: 'storage folder writable'\n                    }\n                ]\n            },\n            database: {\n                class: \"\",\n                passedChecks: 0,\n                description: \"Setup and check database connection\",\n                checks: [\n                    {\n                        id: 'check',\n                        method: 'get',\n                        state: 'pending',\n                        description: 'Check database connection'\n                    },\n                    {\n                        id: 'install',\n                        method: 'post',\n                        state: 'pending',\n                        description: 'Install migrations table'\n                    },\n                    {\n                        id: 'migrate',\n                        method: 'post',\n                        state: 'pending',\n                        description: 'Run migrations'\n                    },\n                    {\n                        id: 'seed',\n                        method: 'post',\n                        state: 'pending',\n                        description: 'Seed initial data'\n                    }\n                ]\n            },\n            administrator: {\n                created: false,\n                class: \"\",\n                description: \"Create the administrator user\",\n                user: {\n                    firstName: '',\n                    lastName: '',\n                    email: '',\n                    password: '',\n                    password_confirmation: ''\n                }\n            },\n            ready: {\n                class: \"\",\n                description: \"Setup complete\"\n            }\n        }\n    },\n\n    methods: {\n        runChecks() {\n            this.steps.environment.checks.forEach(check => check.state = 'pending');\n            this.steps.environment.passedChecks = 0;\n\n            this.runCheck(0);\n        },\n\n        runCheck(pos) {\n            let self = this;\n            let check = self.steps.environment.checks[pos];\n\n            $q.get(`/api/install/check/${check.id}`)\n                .success(({data}) => {\n                    self.steps.environment.checks[pos].state = data ? 'ok' : 'failed';\n\n                    if (++pos < self.steps.environment.checks.length) {\n                        self.runCheck(pos);\n                        self.steps.environment.passedChecks++;\n                    } else if (self.steps.environment.passedChecks == self.steps.environment.checks.length - 1)\n                        toastr.success('All checks passed! Please click the next button to continue');\n                });\n        },\n\n        completeEnvironmentStep() {\n            if (this.steps.environment.passedChecks != this.steps.environment.checks.length - 1) {\n                toastr.warning('Please click the Start button to run checks before continuing');\n                return;\n            }\n\n            this.steps.environment.class = 'completed';\n            this.steps.database.class = 'active';\n        },\n\n\n        runDbChecks() {\n            this.steps.database.checks.forEach(check => check.state = 'pending');\n            this.steps.database.passedChecks = 0;\n\n            this.runDbCheck(0);\n        },\n\n        runDbCheck(pos) {\n            let self = this;\n            let check = self.steps.database.checks[pos];\n\n            $q[check.method](`/api/install/database/${check.id}`)\n                .success(({data}) => {\n                    check.state = data ? 'ok' : 'failed';\n\n                    if (check.state == 'failed') {\n                        toastr.error('Something went wrong! Please check the applications log file for more information', 'Database Error');\n                    } else if (++pos < self.steps.database.checks.length) {\n                        self.runDbCheck(pos);\n                        self.steps.database.passedChecks++;\n                    } else if (self.steps.database.passedChecks == self.steps.database.checks.length - 1)\n                        toastr.success('All steps complete! Please click the next button to continue');\n                });\n        },\n\n        completeDatabaseStep() {\n            if (this.steps.database.passedChecks != this.steps.database.checks.length - 1) {\n                toastr.warning('Please click the Check Connection button to run the connection test before continuing');\n                return;\n            }\n            this.steps.database.class = 'completed';\n            this.steps.administrator.class = 'active';\n        },\n\n        createAdministrator() {\n            let self = this;\n            $q.put('/api/install/administrator', this.steps.administrator.user)\n                .success(() => {\n                    toastr.success('Administrator user successfully');\n                    self.steps.administrator.created = true;\n                });\n        },\n\n        completeAdministratorStep() {\n            this.steps.administrator.class = \"completed\";\n            this.steps.ready.class = \"completed\";\n        }\n    }\n\n});"],"sourceRoot":"/source/"}